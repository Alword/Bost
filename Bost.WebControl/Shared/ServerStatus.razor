@using Bost.Shared;
@using Bost.Shared.Enums;
@using Microsoft.AspNetCore.SignalR.Client
@using System.Diagnostics
@inject Microsoft.Extensions.Localization.IStringLocalizer<ServerStatus> Loc
@if (ToolState == ToolState.Connected)
{

    <div class="container">

        <div class="form-inline justify-content-center">
            <div class="form-group">
                <input placeholder="@Loc["Name"]" @bind="Name" @bind:event="oninput" class="form-control">
            </div>
            <div class="form-group mx-sm-3">
                <input placeholder="192.168.1.69:25565" @bind="IpPassword" @bind:event="oninput" class="form-control">
            </div>
            <button @onclick="(() => AddServer(Name, IpPassword))" class="btn btn-primary">@Loc["Add"]</button>
        </div>

        <table class="table table-bordered mt-3">
            <thead>
                <tr>
                    <th scope="col">@Loc["Name"]</th>
                    <th scope="col">@Loc["Ip"]</th>
                    <th scope="col">@Loc["CoreName"]</th>
                    <th scope="col">@Loc["Protocol"]</th>
                    <th scope="col">@Loc["Online"]</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var server in servers.Values)
                {
                    <tr class="showhim">
                        <th scope="row" class="d-flex">
                            <NavLink href="@($"/control/{server.Id}")">@server.Name</NavLink>
                            <span @onclick="(() => RemoveServer(server.IpPort))" class="showme oi oi-trash ml-auto" />
                        </th>
                        <td>@server.IpPort</td>
                        <td>@server.CoreName</td>
                        <td>@server.Proto</td>
                        <td>@server.OnlineMax</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}
else if (ToolState == ToolState.Connecting)
{
    <div class="container mt-5">
        <div class="text-center">
            <div class="spinner-border" role="status">
                <span class="sr-only">Loading...</span>
            </div>
        </div>
        <div class="text-center">
            <p><h4>@Loc["Connecting"]</h4></p>
        </div>
    </div>
}
else
{
    <div class="container">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">@Loc["Server not found"]</h5>
                </div>
                <div class="modal-body">
                    <p>@Loc["Agent hub is not connected!"]</p>
                    <p>@Loc["Please download the required server component (connection to remote server currently not supported)"]</p>
                    <div class="alert alert-danger" role="alert">
                        @Error
                        @Url
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-primary">@Loc["Download"]</button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private ToolState ToolState { get; set; }
    private string Error { get; set; }
    private string Url { get; set; }

    private string Name { get; set; }
    private string IpPassword { get; set; }

    private HubConnection hubConnection;

    Dictionary<string, ServerStatusData> servers = new Dictionary<string, ServerStatusData>();

    protected override async Task OnInitializedAsync()
    {
        if (string.IsNullOrWhiteSpace(Url))
        {
            Url = "https://localhost:5001/servershub";
        }

        ToolState = ToolState.Connecting;
        hubConnection = new HubConnectionBuilder()
            .WithUrl(Url)
            .Build();

        hubConnection.On<ServerStatusData>("ReciveServerStatus", (serverStatusData) =>
        {
            if (servers.ContainsKey(serverStatusData.IpPort))
            {
                servers[serverStatusData.IpPort] = serverStatusData;
            }
            else
            {
                servers.Add(serverStatusData.IpPort, serverStatusData);
            }
            StateHasChanged();
        });
        hubConnection.On<string>("ReciveServerRemove", (ipPort) =>
        {
            if (servers.ContainsKey(ipPort))
            {
                servers.Remove(ipPort);
                StateHasChanged();
            }
        });
        try
        {
            await hubConnection.StartAsync();
        }
        catch (Exception e)
        {
            ToolState = ToolState.ConnectionFail;
            Error = e.Message;
        }
        ToolState = ToolState.Connected;
    }

    protected void AddServer(string name, string ipport)
        => hubConnection.SendAsync(nameof(AddServer), name, ipport);

    protected void RemoveServer(string ipport)
        => hubConnection.SendAsync(nameof(RemoveServer), ipport);
}
