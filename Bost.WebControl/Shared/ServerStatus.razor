@using Bost.Shared;
@using Microsoft.AspNetCore.SignalR.Client
@using System.Diagnostics
<div class="container">

    <div class="form-inline justify-content-center">
        <div class="form-group">
            <input placeholder="Название" @bind="Name"  @bind:event="oninput" class="form-control">
        </div>
        <div class="form-group mx-sm-3">
            <input placeholder="192.168.1.69:25565" @bind="IpPassword"  @bind:event="oninput" class="form-control">
        </div>
        <button @onclick="(()=>AddServer(Name,IpPassword))" class="btn btn-primary">Добавить</button>
    </div>

    <table class="table table-bordered mt-3">
        <thead>
            <tr>
                <th scope="col">#</th>
                <th scope="col">Название</th>
                <th scope="col">Описание сервера</th>
                <th scope="col">Название ядра</th>
                <th scope="col">Протокол</th>
                <th scope="col">Онлайн</th>
            </tr>
        </thead>
        <tbody>
            @for (int i = 1; i < servers.Count; ++i)
            {
                <tr>
                    <th scope="row">@i</th>
                    <td>@servers[i].Name</td>
                    <td>@servers[i].Description</td>
                    <td>@servers[i].CoreName</td>
                    <td>@servers[i].Proto</td>
                    <td>@servers[i].OnlineMax</td>
                </tr>
            }
        </tbody>
    </table>
</div>

@code {

    private string Name { get; set; }
    private string IpPassword { get; set; }

    private HubConnection hubConnection;

    List<ServerStatusData> servers = new List<ServerStatusData>();

    protected override async Task OnInitializedAsync()
    {
        AddDebugData();
        hubConnection = new HubConnectionBuilder()
            .WithUrl("https://localhost:5001/servershub")
            .Build();

        hubConnection.On<ServerStatusData>("ReciveServerStatus", (serverStatusData) =>
        {
            servers.Add(serverStatusData);
            StateHasChanged();
        });
        try
        {
            await hubConnection.StartAsync();
        }
        catch (Exception e)
        {
            Console.WriteLine(e.Message);
            //throw;
        }
    }

    protected void AddServer(string name, string ipport)
    {
        hubConnection.SendAsync("AddServer", name, ipport);
    }

    [Conditional("Debug")]
    private void AddDebugData()
    {
        servers.Add(new ServerStatusData()
        {
            CoreName = "Spigot",
            Proto = 123,
            Description = "Описание",
            Name = "Название",
            Max = 80,
            Online = 3,
        });
    }
}
